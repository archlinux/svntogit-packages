diff --git i/tests/test_properties.py w/tests/test_properties.py
index ec5df0ca..f8b7823b 100644
--- i/tests/test_properties.py
+++ w/tests/test_properties.py
@@ -688,7 +688,7 @@ class TestProperty(unittest.TestCase):
 
         # we test known-bad values here which cause Gtk-WARNING logs.
         # Explicitly allow these for this test.
-        with capture_glib_warnings(allow_warnings=True):
+        with capture_glib_warnings(allow_warnings=True, allow_criticals=True):
             o = C()
             self.assertEqual(o.prop_int, 1)
 
diff --git i/tests/test_repository.py w/tests/test_repository.py
index 0aa29b63..4390ff04 100644
--- i/tests/test_repository.py
+++ w/tests/test_repository.py
@@ -364,17 +364,17 @@ class Test(unittest.TestCase):
         # also raise a RuntimeError.
         GIMarshallingTests.NoTypeFlags  # cause flags registration
         info = repo.find_by_name('GIMarshallingTests', 'NoTypeFlags')
-        with capture_glib_warnings(allow_warnings=True):
+        with capture_glib_warnings(allow_warnings=True, allow_criticals=True):
             self.assertRaises(RuntimeError,
                               GIRepository.flags_register_new_gtype_and_add,
                               info)
 
     def test_enum_double_registration_error(self):
         # a warning is printed for double registration and pygobject will
         # also raise a RuntimeError.
         GIMarshallingTests.Enum  # cause enum registration
         info = repo.find_by_name('GIMarshallingTests', 'Enum')
-        with capture_glib_warnings(allow_warnings=True):
+        with capture_glib_warnings(allow_warnings=True, allow_criticals=True):
             self.assertRaises(RuntimeError,
                               GIRepository.enum_register_new_gtype_and_add,
                               info)
diff --git i/tests/test_signal.py w/tests/test_signal.py
index e327d374..8a935fd8 100644
--- i/tests/test_signal.py
+++ w/tests/test_signal.py
@@ -365,7 +365,7 @@ class TestClosures(unittest.TestCase):
             self.count += 1
 
     def _callback_invalid_stop_emission_name(self, obj, prop):
-        with capture_glib_warnings(allow_warnings=True) as warn:
+        with capture_glib_warnings(allow_warnings=True, allow_criticals=True) as warn:
             obj.stop_emission_by_name('notasignal::baddetail')
             self.emission_error = True
             self.assertTrue(warn)
